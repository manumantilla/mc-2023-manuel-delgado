
package RentCarLondra1;

/**
 * @author manue
 */public class biseccion {
    public static void main(String[] args) {
        double a = 0.5; // Límite inferior del intervalo
        double b = 1;  // Límite superior del intervalo
        double epsilon = 0.0001; // Tolerancia de error
        
        double resultado = metodoBiseccion(a, b, epsilon);
        int numIteraciones = getNumIteraciones();
        
        System.out.println("La raíz aproximada es: " + resultado);
        System.out.println("Error aproximado: " + f(resultado));
        System.out.println("Número de iteraciones: " + numIteraciones);
    }
    
    public static double metodoBiseccion(double a, double b, double epsilon) {
        int maxIteraciones = 1000;
        int iteracion = 1;
        double c = 0;
        
        while (iteracion <= maxIteraciones) {
            c = (a + b) / 2;
            
            if (Math.abs(f(c)) < epsilon) {
                break;
            }
            
            if (f(a) * f(c) < 0) {
                b = c;
            } else {
                a = c;
            }
            
            iteracion++;
        }
        
        setNumIteraciones(iteracion);
        return c;
    }
    
    public static double f(double x) {
        // Función: 1.5x^3 - 3.5x^2 - 2x + 2
        return 1.5 * Math.pow(x, 3) - 3.5 * Math.pow(x, 2) - 2 * x + 2;
    }
    
    // Variables estáticas para almacenar el número de iteraciones
    private static int numIteraciones = 0;
    
    public static void setNumIteraciones(int num) {
        numIteraciones = num;
    }
    
    public static int getNumIteraciones() {
        return numIteraciones;
    }
}
